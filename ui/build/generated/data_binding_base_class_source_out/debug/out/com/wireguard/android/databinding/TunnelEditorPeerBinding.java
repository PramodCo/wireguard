// Generated by data binding compiler. Do not edit!
package com.wireguard.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageButton;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ObservableList;
import androidx.databinding.ViewDataBinding;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.google.android.material.textview.MaterialTextView;
import com.wireguard.android.R;
import com.wireguard.android.fragment.TunnelEditorFragment;
import com.wireguard.android.viewmodel.PeerProxy;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class TunnelEditorPeerBinding extends ViewDataBinding {
  @NonNull
  public final TextInputLayout allowedIpsLabelLayout;

  @NonNull
  public final TextInputEditText allowedIpsText;

  @NonNull
  public final AppCompatImageButton delete;

  @NonNull
  public final TextInputLayout endpointLabelLayout;

  @NonNull
  public final TextInputEditText endpointText;

  @NonNull
  public final MaterialTextView peerTitle;

  @NonNull
  public final TextInputLayout persistentKeepaliveLabelLayout;

  @NonNull
  public final TextInputEditText persistentKeepaliveText;

  @NonNull
  public final TextInputLayout preSharedKeyLabelLayout;

  @NonNull
  public final TextInputEditText preSharedKeyText;

  @NonNull
  public final TextInputLayout publicKeyLabelLayout;

  @NonNull
  public final TextInputEditText publicKeyText;

  @NonNull
  public final CheckBox selectedCheckbox;

  @Bindable
  protected ObservableList<PeerProxy> mCollection;

  @Bindable
  protected PeerProxy mItem;

  @Bindable
  protected TunnelEditorFragment mFragment;

  protected TunnelEditorPeerBinding(Object _bindingComponent, View _root, int _localFieldCount,
      TextInputLayout allowedIpsLabelLayout, TextInputEditText allowedIpsText,
      AppCompatImageButton delete, TextInputLayout endpointLabelLayout,
      TextInputEditText endpointText, MaterialTextView peerTitle,
      TextInputLayout persistentKeepaliveLabelLayout, TextInputEditText persistentKeepaliveText,
      TextInputLayout preSharedKeyLabelLayout, TextInputEditText preSharedKeyText,
      TextInputLayout publicKeyLabelLayout, TextInputEditText publicKeyText,
      CheckBox selectedCheckbox) {
    super(_bindingComponent, _root, _localFieldCount);
    this.allowedIpsLabelLayout = allowedIpsLabelLayout;
    this.allowedIpsText = allowedIpsText;
    this.delete = delete;
    this.endpointLabelLayout = endpointLabelLayout;
    this.endpointText = endpointText;
    this.peerTitle = peerTitle;
    this.persistentKeepaliveLabelLayout = persistentKeepaliveLabelLayout;
    this.persistentKeepaliveText = persistentKeepaliveText;
    this.preSharedKeyLabelLayout = preSharedKeyLabelLayout;
    this.preSharedKeyText = preSharedKeyText;
    this.publicKeyLabelLayout = publicKeyLabelLayout;
    this.publicKeyText = publicKeyText;
    this.selectedCheckbox = selectedCheckbox;
  }

  public abstract void setCollection(@Nullable ObservableList<PeerProxy> collection);

  @Nullable
  public ObservableList<PeerProxy> getCollection() {
    return mCollection;
  }

  public abstract void setItem(@Nullable PeerProxy item);

  @Nullable
  public PeerProxy getItem() {
    return mItem;
  }

  public abstract void setFragment(@Nullable TunnelEditorFragment fragment);

  @Nullable
  public TunnelEditorFragment getFragment() {
    return mFragment;
  }

  @NonNull
  public static TunnelEditorPeerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.tunnel_editor_peer, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static TunnelEditorPeerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<TunnelEditorPeerBinding>inflateInternal(inflater, R.layout.tunnel_editor_peer, root, attachToRoot, component);
  }

  @NonNull
  public static TunnelEditorPeerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.tunnel_editor_peer, null, false, component)
   */
  @NonNull
  @Deprecated
  public static TunnelEditorPeerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<TunnelEditorPeerBinding>inflateInternal(inflater, R.layout.tunnel_editor_peer, null, false, component);
  }

  public static TunnelEditorPeerBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static TunnelEditorPeerBinding bind(@NonNull View view, @Nullable Object component) {
    return (TunnelEditorPeerBinding)bind(component, view, R.layout.tunnel_editor_peer);
  }
}
